// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2016 20:35:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Projeto_Final_Microprocessador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Projeto_Final_Microprocessador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLEAR_START;
reg CLK;
reg [7:0] data;
// wires                                               
wire S0;
wire S1;
wire S2;
wire S3;
wire S4;
wire S5;
wire S6;
wire S7;

// assign statements (if any)                          
Projeto_Final_Microprocessador i1 (
// port map - connection between master ports and signals/registers   
	.CLEAR_START(CLEAR_START),
	.CLK(CLK),
	.data(data),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S5(S5),
	.S6(S6),
	.S7(S7)
);
initial 
begin 
#1000000 $finish;
end 

// CLEAR_START
initial
begin
	CLEAR_START = 1'b1;
	CLEAR_START = #160000 1'b0;
	CLEAR_START = #140000 1'b1;
	CLEAR_START = #160000 1'b0;
	CLEAR_START = #140000 1'b1;
	CLEAR_START = #120000 1'b0;
	CLEAR_START = #160000 1'b1;
end 

// CLK
initial
begin
	CLK = 1'b1;
	CLK = #100000 1'b0;
	CLK = #80000 1'b1;
	CLK = #100000 1'b0;
	CLK = #60000 1'b1;
	CLK = #100000 1'b0;
	CLK = #100000 1'b1;
	CLK = #80000 1'b0;
	CLK = #100000 1'b1;
	CLK = #80000 1'b0;
	CLK = #80000 1'b1;
	CLK = #80000 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
	data[5] = #320000 1'b1;
	data[5] = #160000 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
	data[4] = #180000 1'b1;
	data[4] = #140000 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
	data[3] = #20000 1'b1;
	data[3] = #300000 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
	data[2] = #320000 1'b1;
	data[2] = #160000 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
	data[1] = #320000 1'b1;
	data[1] = #160000 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
	data[0] = #20000 1'b1;
	data[0] = #300000 1'b0;
end 
endmodule

